//
// Prefix header for all source files of the 'iTunesSearch' target in the 'iTunesSearch' project
//

#import <Availability.h>

#ifndef __IPHONE_3_0
#warning "This project uses features only available in iOS SDK 3.0 and later."
#endif

#ifdef __OBJC__
    #import <UIKit/UIKit.h>
    #import <Foundation/Foundation.h>
#endif


#import "GAI.h"
#import "GAITrackedViewController.h"
#import "GAITransaction.h"
#import "GAITransactionItem.h"
#import "GAITracker.h"

#define IMG_PIC @"https://graph.facebook.com/"

#define APP_ID @"355116974569178"

/*
 デバッグログ用マクロ。
 NSLog()の使いすぎは明らかなパフォーマンスの低下を招くので、
 リリースビルドからは自動的に取り除かれるようにします。
 */
#ifdef DEBUG
#define DEBUGLOG(...) NSLog(__VA_ARGS__)
#else
#define DEBUGLOG(...) ;
#endif

/*
 ソース上の行番号を出力します。
 ランタイムエラーが出るけど、どこまで正常に実行できているか
 検証する際によく用います。
 */
#ifdef DEBUG
#define LINE() NSLog(@"%d",__LINE__)
#else
#define LINE() ;
#endif

/*
 実行された際、どの関数orメソッド内にいるか出力します。
 同じようなログを出力しまくっていると、
 どのメソッドで出力されたものかわからなくなることがありますが、
 一番最初にこいつを出力しておけば一目瞭然です。
 
 上のLINE()マクロと組み合わせてもいいですね。
 */
#ifdef DEBUG
#define FUNC() NSLog(@"%s",__PRETTY_FUNCTION__)
#else
#define FUNC() ;
#endif

/*
 上3つのような単純なデバッグログでは物足りない場合、こいつを使います。
 引数に入れた引数・返り値なしのblocksを同期的に処理します。
 デバッグビルドでのみ画面上にビルド番号を表示させたりできます。
 
 メモリリークには気をつけましょう。
 */
#ifdef DEBUG
#define DEBUGEXEC(__BLOCK,...) { dispatch_sync(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{ __BLOCK(__VA_ARGS__); });}
#else
#define DEBUGEXEC(__BLOCK,...) ;
#endif
